var documenterSearchIndex = {"docs":
[{"location":"examples/#Examples-1","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#","page":"Examples","title":"Examples","text":"Here we discuss some useful examples of usage.","category":"page"},{"location":"examples/#Dualize-a-JuMP-model-1","page":"Examples","title":"Dualize a JuMP model","text":"","category":"section"},{"location":"examples/#Naming-the-dual-variables-and-dual-constraints-1","page":"Examples","title":"Naming the dual variables and dual constraints","text":"","category":"section"},{"location":"examples/#Solving-a-primal-problem-using-it's-dual-formulation-1","page":"Examples","title":"Solving a primal problem using it's dual formulation","text":"","category":"section"},{"location":"manual/#Manual-1","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"note: Note\nThis package only works for optimization models that can be written in the conic-form.","category":"page"},{"location":"manual/#Conic-Duality-1","page":"Manual","title":"Conic Duality","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Conic duality is the starting point for MOI's duality conventions. When all functions are affine (or coordinate projections), and all constraint sets are closed convex cones, the model may be called a conic optimization problem. For conic-form minimization problems, the primal is:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"beginalign\n min_x in mathbbR^n  a_0^T x + b_0\n\n textst  A_i x + b_i  in mathcalC_i  i = 1 ldots m\nendalign","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"and the dual is:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"beginalign\n max_y_1 ldots y_m  -sum_i=1^m b_i^T y_i + b_0\n\n textst  a_0 - sum_i=1^m A_i^T y_i  = 0\n\n  y_i  in mathcalC_i^*  i = 1 ldots m\nendalign","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"where each mathcalC_i is a closed convex cone and mathcalC_i^* is its dual cone.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"For conic-form maximization problems, the primal is:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"beginalign\n max_x in mathbbR^n  a_0^T x + b_0\n\n textst  A_i x + b_i  in mathcalC_i  i = 1 ldots m\nendalign","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"and the dual is:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"beginalign\n min_y_1 ldots y_m  sum_i=1^m b_i^T y_i + b_0\n\n textst  a_0 + sum_i=1^m A_i^T y_i  = 0\n\n  y_i  in mathcalC_i^*  i = 1 ldots m\nendalign","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"A linear inequality constraint a^T x + b ge c should be interpreted as a^T x + b - c in mathbbR_+, and similarly a^T x + b le c should be interpreted as a^T x + b - c in mathbbR_-. Variable-wise constraints should be interpreted as affine constraints with the appropriate identity mapping in place of A_i.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"For the special case of minimization LPs, the MOI primal form can be stated as","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"beginalign\n min_x in mathbbR^n  a_0^T x + b_0\n\n textst\nA_1 x  ge b_1\n A_2 x  le b_2\n A_3 x  = b_3\nendalign","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"By applying the stated transformations to conic form, taking the dual, and transforming back into linear inequality form, one obtains the following dual:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"beginalign\n max_y_1y_2y_3  b_1^Ty_1 + b_2^Ty_2 + b_3^Ty_3 + b_0\n\n textst\nA_1^Ty_1 + A_2^Ty_2 + A_3^Ty_3  = a_0\n y_1 ge 0\n y_2 le 0\nendalign","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"For maximization LPs, the MOI primal form can be stated as:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"beginalign\n max_x in mathbbR^n  a_0^T x + b_0\n\n textst\nA_1 x  ge b_1\n A_2 x  le b_2\n A_3 x  = b_3\nendalign","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"and similarly, the dual is:","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"beginalign\n min_y_1y_2y_3  -b_1^Ty_1 - b_2^Ty_2 - b_3^Ty_3 + b_0\n\n textst\nA_1^Ty_1 + A_2^Ty_2 + A_3^Ty_3  = -a_0\n y_1 ge 0\n y_2 le 0\nendalign","category":"page"},{"location":"manual/#Supported-constraints-1","page":"Manual","title":"Supported constraints","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"This is the list of supported Function-in-Set constraints of the package. If you try to dualize a constraint not listed here, it will return an usupported error.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"MOI Function MOI Set\nSingleVariable GreaterThan\nSingleVariable LessThan\nSingleVariable EqualTo\nScalarAffineFunction GreaterThan\nScalarAffineFunction LessThan\nScalarAffineFunction EqualTo\nVectorOfVariables Nonnegatives\nVectorOfVariables Nonpositives\nVectorOfVariables Zeros\nVectorOfVariables SecondOrderCone\nVectorOfVariables RotatedSecondOrderCone\nVectorOfVariables PositiveSemidefiniteConeTriangle\nVectorOfVariables ExponentialCone\nVectorOfVariables DualExponentialCone\nVectorOfVariables PowerCone\nVectorOfVariables DualPowerCone\nVectorAffineFunction Nonnegatives\nVectorAffineFunction Nonpositives\nVectorAffineFunction Zeros\nVectorAffineFunction SecondOrderCone\nVectorAffineFunction RotatedSecondOrderCone\nVectorAffineFunction PositiveSemidefiniteConeTriangle\nVectorAffineFunction ExponentialCone\nVectorAffineFunction DualExponentialCone\nVectorAffineFunction PowerCone\nVectorAffineFunction DualPowerCone","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Note that some of MOI constraints can be bridged, see Bridges, to constraints in this list.","category":"page"},{"location":"manual/#Supported-objective-functions-1","page":"Manual","title":"Supported objective functions","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"MOI Function\nSingleVariable\nScalarAffineFunction","category":"page"},{"location":"manual/#Dualize-a-MathOptInterface-model-1","page":"Manual","title":"Dualize a MathOptInterface model","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Conic dual of a model ADD EXAMPLE.","category":"page"},{"location":"manual/#DualOptimizer-1","page":"Manual","title":"DualOptimizer","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"You can solve primal problems using its dual formulation. ADD EXAMPLE.","category":"page"},{"location":"reference/#Reference-1","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"dualize\nDualOptimizer\nDualization.supported_constraints\nDualization.supported_objective\nDualization.set_dual_model_sense\nDualization.get_primal_objective\nDualization.get_dual_objective\nDualization.set_dual_objective\nDualization.PrimalObjective\nDualization.DualObjective\nDualization.DualNames\nDualization.dual_set","category":"page"},{"location":"reference/#Dualization.dualize","page":"Reference","title":"Dualization.dualize","text":"dualize(model::MOI.ModelLike)\n\nDualize the model\n\n\n\n\n\n","category":"function"},{"location":"reference/#Dualization.DualOptimizer","page":"Reference","title":"Dualization.DualOptimizer","text":"DualOptimizer(dual_optimizer::OT) where {OT <: MOI.ModelLike}\n\nDualOptimizer constructor\n\n\n\n\n\n","category":"type"},{"location":"reference/#Dualization.supported_constraints","page":"Reference","title":"Dualization.supported_constraints","text":"supported_constraints(con_types::Vector{Tuple{DataType, DataType}})\n\nReturns true if Function-in-Set is supported for Dualization and throws an error if it is not.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Dualization.supported_objective","page":"Reference","title":"Dualization.supported_objective","text":"supported_objective(primal_model::MOI.ModelLike)\n\nReturns true if MOI.ObjectiveFunctionType() is supported for Dualization and throws an error if it is not.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Dualization.set_dual_model_sense","page":"Reference","title":"Dualization.set_dual_model_sense","text":"set_dualmodel_sense!(dual_model::MOI.ModelLike, model::MOI.ModelLike)\n\nSet the dual model objective sense\n\n\n\n\n\n","category":"function"},{"location":"reference/#Dualization.get_primal_objective","page":"Reference","title":"Dualization.get_primal_objective","text":"get_primal_obj_coeffs(model::MOI.ModelLike)\n\nGet the coefficients from the primal objective function and return a PrimalObjectiveCoefficients{T}\n\n\n\n\n\n","category":"function"},{"location":"reference/#Dualization.get_dual_objective","page":"Reference","title":"Dualization.get_dual_objective","text":"get_dual_obj_coeffs(dual_model::MOI.ModelLike, dict_constr_coeffs::Dict, \n                        dict_dualvar_primalcon::Dict, poc::POC{T}) where T\n\nGet dual model objective function coefficients\n\n\n\n\n\n","category":"function"},{"location":"reference/#Dualization.set_dual_objective","page":"Reference","title":"Dualization.set_dual_objective","text":"set_DOC(dual_model::MOI.ModelLike, doc::DualObjectiveCoefficients{T}) where T\n\nAdd the objective function to the dual model\n\n\n\n\n\n","category":"function"},{"location":"reference/#Dualization.PrimalObjective","page":"Reference","title":"Dualization.PrimalObjective","text":"PrimalObjectiveCoefficients{T}\n\nPrimal objective coefficients defined as a_0^Tx + b_0 as in http://www.juliaopt.org/MathOptInterface.jl/stable/apimanual/#Advanced-1\n\n\n\n\n\n","category":"type"},{"location":"reference/#Dualization.DualObjective","page":"Reference","title":"Dualization.DualObjective","text":"DualObjectiveCoefficients{T}\n\nDual objective coefficients defined as b_i^Ty + b_0 or -b_i^Ty + b_0 as in http://www.juliaopt.org/MathOptInterface.jl/stable/apimanual/#Advanced-1\n\n\n\n\n\n","category":"type"},{"location":"reference/#Dualization.DualNames","page":"Reference","title":"Dualization.DualNames","text":"DualNames\n\nDualNames is a struct to pass the prefix of dual variables and dual constraints names. See more on naming the variables.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Dualization.dual_set","page":"Reference","title":"Dualization.dual_set","text":"Docs here\n\n\n\n\n\n","category":"function"},{"location":"#Dualization.jl-Documentation-1","page":"Home","title":"Dualization.jl Documentation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Dualization.jl is a package written on top of MathOptInterface that allows users to write the dual of a JuMP model automatically. This package has two main features, the function dualize that enables users to get a dualized JuMP model and the DualOptimizer that enables users to solve a problem providing the solver it's dual version. ","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This package is not yet registered so you can Pkg.add it as follows:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"pkg> add https://github.com/guilhermebodin/Dualization.jl.git","category":"page"}]
}
